import { dirname, join } from 'path';
import { UserConfig } from 'shared/types';
import { normalizeSlash } from '../shared/utils';
import { OUTPUT_DIR } from './constants';
import { createModernBuilder } from './createBuilder';

export async function bundle(rootDir: string, config: UserConfig) {
  const [clientBuilder, ssrBuilder] = await Promise.all([
    createModernBuilder(rootDir, config, false),
    createModernBuilder(rootDir, config, true, {
      output: {
        distPath: {
          root: `${OUTPUT_DIR}/ssr`,
        },
      },
    }),
  ]);
  await Promise.all([clientBuilder.build(), ssrBuilder.build()]);
}

export interface SSRBundleExports {
  render: (url: string) => string;
  routes: import('virtual-routes').Route[];
}

export async function renderPages(config: UserConfig) {
  const cwd = process.cwd();
  const outputPath = join(cwd, OUTPUT_DIR);
  const ssrBundlePath = join(outputPath, 'ssr', 'bundles', 'main.js');
  const { default: fs } = await import('@modern-js/utils/fs-extra');
  const { default: ssrExports } = await import(ssrBundlePath);
  const { render, routes } = ssrExports as SSRBundleExports;
  // Get the html generated by builder, as the default ssr template
  const htmlTemplatePath = join(outputPath, 'html', 'main', 'index.html');
  const htmlTemplate = await fs.readFile(htmlTemplatePath, 'utf-8');

  await Promise.all(
    routes.map(async route => {
      const routePath = route.path;
      const appHtml = render(routePath);
      const html = htmlTemplate.replace('$DOC_CONTENT', appHtml);
      const normalizeHtmlFilePath = (path: string) => {
        const normalizedBase = normalizeSlash(config.doc?.base || '/');

        if (path.endsWith('/')) {
          return `${path}index.html`.replace(normalizedBase, '');
        }

        return `${path}.html`.replace(normalizedBase, '');
      };
      const fileName = normalizeHtmlFilePath(routePath);
      await fs.ensureDir(join(outputPath, dirname(fileName)));
      await fs.writeFile(join(outputPath, fileName), html);
    }),
  );
}

export async function build(rootDir: string, config: UserConfig) {
  await bundle(rootDir, config);
  await renderPages(config);
}
